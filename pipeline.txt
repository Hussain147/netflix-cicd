pipeline{
    agent any
    tools{
        jdk 'jdk11'
        nodejs 'node16'
        maven 'maven'
    }
    environment {
        SCANNER_HOME=tool 'sonar5'
        BUILD_NUMBER = "${currentBuild.number}"
        dockerImageVersion = "v${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('sonar-token')
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/Hussain147/netflix-cicd.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner \
  -Dsonar.projectKey=netflix \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://3.85.232.136:9000 \
  -Dsonar.login=sqp_3413274a51c135e9b461025275e362afbedbc4ca '''
                }
            }
        }
        stage("quality gate"){
          steps {
                script {
                    

                    // Check the quality gate status
                    def qualityGateStatus = waitForQualityGate()

                    // Fail the build if the quality gate is not passed
                    if (qualityGateStatus != 'OK') {
                        error "Quality gate failed! Check the analysis tool for details."
                    }
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker-login', toolName: 'docker'){   
                       sh "docker build --build-arg TMDB_V3_API_KEY=19c967a246a4896449b52845434f63df -t netflix ."
                       sh "docker tag netflix kubehussain/netflix:$dockerImageVersion"
                       sh "docker push kubehussain/netflix:$dockerImageVersion"
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image kubehussain/netflix:$dockerImageVersion > trivyimage.txt" 
            }
        }
        stage('Deploy to container'){
            steps{
                sh 'docker run -d -p 8081:80 kubehussain/netflix:$dockerImageVersion'
            }
        }
        stage('GitOps Enabler to update deployment manifest') {
            environment {
                GIT_REPO_NAME = "netflix-cicd"
                GIT_USER_NAME = "hussain147"
                GIT_USER_EMAIL = "hussainashrafi406@gmail.com"

            
        }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {

                // Specify the target directory for the clone
                        def cloneDirectory = "netflix-cicd"

                // Remove the existing directory if it exists
                        sh "rm -rf ${cloneDirectory}"

                // Clone the repository
                        sh "git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} ${cloneDirectory}"
                        dir("${cloneDirectory}/Kubernetes") {
                    // Fetch the current Deployment YAML
                            sh "wget https://raw.githubusercontent.com/${GIT_USER_NAME}/${GIT_REPO_NAME}/main/Kubernetes/deployment.yml"

                    // Modify the image tag in the Deployment YAML
                            sh "sed -i 's|kubehussain/netflix:.*|kubehussain/netflix:${dockerImageVersion}|g' deployment.yml"

                    // Add, commit, and push the changes
                            sh "git add deployment.yml"
                            sh "git commit -m 'Updated deployment image to version ${dockerImageVersion}'"
                            sh "git push origin main"
                }
            }
        }
    }
    }

    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'alexa.oreo234@gmail.com',
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}